#!/usr/bin/env node
var cliparse = require('cliparse');
var parsers = cliparse.parsers;
var pckJson = require('../package.json');
var colors = require('colors');

/*----------------------------------------------------------------*/
/* #TODO parse the commands folder and auto generate commands
/*----------------------------------------------------------------*/
var BBCLI = cliparse.cli({
    name: pckJson.name,
    version: pckJson.version,
    description: 'Backbase CLI tool',

    commands: [

        /*----------------------------------------------------------------*/
        /* Generate Widget
        /*----------------------------------------------------------------*/
        cliparse.command('generate', {
            description: 'Clone a git repository template. Default is using `widget-ng-template`.',
            args: [
                cliparse.argument('url', {
                    description: 'Template repository url',
                    default: 'https://stash.backbase.com/scm/lp/widget-ng-template.git'
                })
            ],
            options: [

            ]
        }, require('../lib/commands/common/generate') ),

        /*----------------------------------------------------------------*/
        /* Start Widget
        /*----------------------------------------------------------------*/
        cliparse.command('start', {
            description: 'Start local development brwserSync server on http://localhost:3000/.',
            args: [

            ],
            options: [

            ]
        }, require('../lib/commands/common/start') ),

        /*----------------------------------------------------------------*/
        /* Test Widget
        /*----------------------------------------------------------------*/
        /**
         * @todo add unit / functional / api tests
         * @type {String}
         */
        cliparse.command('test', {
            description: 'Test the widget/module using karma test runner and PhantomJS',
            args: [
                // cliparse.argument('type', { description: "Unit test", default: 'unit', })
            ],
            options: [
                cliparse.flag('watch', { aliases: ['w'], description: 'Watch files'}),
                cliparse.flag('coverage', { aliases: ['c'], description: 'With coverage'}),
                cliparse.option('config', { description: 'Custom karma configuration file'}),
                cliparse.option('browsers', { description: 'A comma separated list of browsers to launch and capture'})
            ]
        }, require('../lib/commands/common/test') ),

        /*----------------------------------------------------------------*/
        /* Build Widget
        /*----------------------------------------------------------------*/
        cliparse.command('build', {
            description: 'Builds the widget/module.',
            args: [
                cliparse.argument('config', {
                    description: 'path to config file for components management',
                    default: ''
                }),
                cliparse.argument('excludes', {
                    description: 'array of components to exclude',
                    default: ''
                }),
                cliparse.argument('destination', {
                    description: 'name of target file',
                    default: ''
                })
            ],
            options: [
                cliparse.flag('skipTests', { aliases: ['s'], description: 'Skip tests'}),
                cliparse.flag('skipClean', { aliases: ['r'], description: 'Skip clean'}),
                cliparse.flag('withTemplates', { aliases: ['t'], description: 'Bundle HTML templates into build file (for widgets)'}),
                cliparse.flag('withModuleId', { aliases: ['m'], description: 'Build with AMD module ID in definition'}),
                cliparse.flag('withConfig', { aliases: ['c'], description: 'Build with config witch is passed as an argument'}),
                cliparse.flag('withCustomEntry', { aliases: ['e'], description: 'Build with custom entry point (works with excludes)'}),
                cliparse.flag('withExcludes', { aliases: ['x'], description: 'Exclude components from main file'})
            ]
        }, require('../lib/commands/common/build') ),

        /*----------------------------------------------------------------*/
        /* Bump bower version
        /*----------------------------------------------------------------*/
        cliparse.command('bump', {
            description: 'Bump version in bower, README.md and CHANGELOG.md',
            args: [
                cliparse.argument('VERSION', {
                    description: 'major'.gray + ' [X.x.x], ' + 'minor'.gray + ' [x.X.x] or ' + 'patch'.gray + ' [x.x.X]',
                    parser: function(v) {
                        if (['major', 'minor', 'patch'].indexOf(v) !== -1) return {success: v};
                        else return {error: 'Wrong version!'.red};
                    }
                }),
                cliparse.argument('MESSAGE', {
                    description: 'Bump message',
                    default: ''
                })
            ],
            options: [
                cliparse.flag('version-only', { aliases: ['v'], description: 'In version-only mode only README version section will be updated'})
            ]
        }, require('../lib/commands/common/bump') ),
        /*----------------------------------------------------------------*/
        /* Register bower package
        /*----------------------------------------------------------------*/
        cliparse.command('register', {
            description: 'Register bower package to registry endpoint. Default `http://launchpad.backbase.com:5678/`',
            args: [
                cliparse.argument('registry', {
                    description: 'Bower registry endpoint.',
                    default: 'http://launchpad.backbase.com:5678'
                })
            ],
            options: [

            ]
        }, require('../lib/commands/common/register') ),
        /*----------------------------------------------------------------*/
        /* Unregister bower package
        /*----------------------------------------------------------------*/
        cliparse.command('unregister', {
            description: 'Unregister bower package to registry endpoint. Default `http://launchpad.backbase.com:5678/`',
            args: [
                cliparse.argument('registry', {
                    description: 'Bower registry endpoint.',
                    default: 'http://launchpad.backbase.com:5678'
                })
            ],
            options: [

            ]
        }, require('../lib/commands/common/unregister') ),

        /*----------------------------------------------------------------*/
        /* Custom Build
        /*----------------------------------------------------------------*/
        cliparse.command('custom-build', {
            description: 'Builds the widget/module using custom entry points.',
            args: [
                cliparse.argument('config', {
                    description: 'path to config file for components management',
                    default: ''
                })
            ],
            options: [
                cliparse.flag('withTemplates', { aliases: ['t'], description: 'Bundle HTML templates into build file (for widgets)'}),
                cliparse.flag('useUnminified', { aliases: ['u'], description: 'Build with unminified scripts'}),
                cliparse.flag('verbose', { aliases: ['v'], description: 'Flag to turn on/off webpack output'}),
            ]
        }, require('../lib/commands/common/custom-build') ),

        /*----------------------------------------------------------------*/
        /* Clean Widget
        /*----------------------------------------------------------------*/
        cliparse.command('clean', {
            description: 'Clean the widget/module dist folder',
            args: [],
            options: []
        }, require('../lib/commands/common/clean') )
    ]
});

cliparse.parse(BBCLI);
