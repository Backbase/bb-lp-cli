#!/usr/bin/env node
var cliparse = require('cliparse');
var parsers = cliparse.parsers;
var pckJson = require('../package.json');
var colors = require('colors');
var utils = require('../lib/utils');

/*----------------------------------------------------------------*/
/* #TODO parse the commands folder and auto generate commands
/*----------------------------------------------------------------*/
var BBCLI = cliparse.cli({
    name: pckJson.name,
    version: pckJson.version,
    description: 'Backbase CLI tool',

    commands: [

        /*----------------------------------------------------------------*/
        /* Generate Widget
        /*----------------------------------------------------------------*/
        cliparse.command('generate', {
            description: 'Clone a git repository template. Default is using `widget-ng-template`.',
            args: [
                cliparse.argument('url', {
                    description: 'Template repository url',
                    default: 'git@bitbucket.org:backbase/lpg-generator-widget-ng.git'
                })
            ],
            options: [
                cliparse.flag('prcessImages', { aliases: ['i'], description: 'Process images by template engine. Images are excluded by default.'})
            ]
        }, require('../lib/commands/common/generate') ),

        /*----------------------------------------------------------------*/
        /* Start Widget
        /*----------------------------------------------------------------*/
        cliparse.command('start', {
            description: 'Start local development brwserSync server on http://localhost:3000/.',
            args: [

            ],
            options: [
                cliparse.option('port', {
                    aliases: ['p'],
                    parser: cliparse.parsers.intParser,
                    description: 'Server port',
                    defaultValue: null
                }),
                cliparse.option('logLevel', {
                    aliases: ['l'],
                    description: 'Log level notifications' + [,
                                    'info'.info,
                                    //'debug'.debug,
                                    //'warn'.warn,
                                    'silent'.gray
                    ].join(' | '),
                    parser: function(v) {
                        if (['debug', 'info', 'silent', 'warn', 'error'].indexOf(v) !== -1) return {success: v};
                        else return {error: 'Wrong log level setting indicator'.red};
                    },
                    default: 'info'
                })
            ]
        }, require('../lib/commands/common/start') ),

        /*----------------------------------------------------------------*/
        /* Test Widget
        /*----------------------------------------------------------------*/
        /**
         * @todo add unit / functional / api tests
         * @type {String}
         */
        cliparse.command('test', {
            description: 'Test the widget/module using karma test runner and PhantomJS',
            args: [
                // cliparse.argument('type', { description: "Unit test", default: 'unit', })
            ],
            options: [
                cliparse.flag('watch', { aliases: ['w'], description: 'Watch files'}),
                cliparse.flag('coverage', { aliases: ['c'], description: 'With coverage'}),
                cliparse.option('config', { description: 'Custom karma configuration file'}),
                cliparse.option('browsers', { description: 'A comma separated list of browsers to launch and capture'}),
                cliparse.option('moduleDirectories', { description: 'A comma separated list of the shared components'})
            ]
        }, require('../lib/commands/common/test') ),

        /*----------------------------------------------------------------*/
        /* Build Widget
        /*----------------------------------------------------------------*/
        cliparse.command('build', {
            description: 'Builds the widget/module.',
            args: [
                cliparse.argument('config', {
                    description: 'path to config file for components management',
                    default: ''
                }),
                cliparse.argument('excludes', {
                    description: 'array of components to exclude',
                    default: ''
                }),
                cliparse.argument('destination', {
                    description: 'name of target file',
                    default: ''
                })
            ],
            options: [
                cliparse.flag('fullTest', { aliases: ['f'], description: 'Run a full test (unit/lint)'}),
                cliparse.flag('skipClean', { aliases: ['r'], description: 'Skip clean'}),
                cliparse.flag('withTemplates', { aliases: ['t'], description: 'Bundle HTML templates into build file (for widgets)'}),
                cliparse.flag('withModuleId', { aliases: ['m'], description: 'Build with AMD module ID in definition'}),
                cliparse.flag('withConfig', { aliases: ['c'], description: 'Build with config witch is passed as an argument'}),
                cliparse.flag('withCustomEntry', { aliases: ['e'], description: 'Build with custom entry point (works with excludes)'}),
                cliparse.flag('withExcludes', { aliases: ['x'], description: 'Exclude components from main file'}),
                cliparse.flag('withPerformance', { aliases: ['p'], description: 'Parse performance annotations'}),
                cliparse.option('moduleDirectories', { description: 'A comma separated list of the shared components'})
            ]
        }, require('../lib/commands/common/build') ),

        /*----------------------------------------------------------------*/
        /* Bump bower version
        /*----------------------------------------------------------------*/
        cliparse.command('bump', {
            description: 'Bump version in bower, README.md and CHANGELOG.md',
            args: [
                cliparse.argument('VERSION', {
                    description: [  'major'.gray + ' [X'.green + '.x.x]',
                                    'minor'.gray + ' [x.' +'X'.green + '.x]',
                                    'patch'.gray + ' [x.x.'+ 'X'.green + ']',
                                    'pre'.gray + ' [x.x.x-pre.'+ 'X'.green + ']'
                                    // @todo support for specific tags
                                ].join(' '),
                    parser: function(v) {
                        if (['major', 'minor', 'patch','pre'].indexOf(v) !== -1) return {success: v};
                        else return {error: 'Wrong version!'.red};
                    }
                }),
                cliparse.argument('MESSAGE', {
                    description: 'Bump message',
                    default: ''
                })
            ],
            options: [
                /**
                 * Add suffix for pre release versions
                 */
                cliparse.option('suffix', {
                    description: 'Pre-release suffix. Ex: -beta.0, -rc.0',
                    default: 'pre'
                }),
                /**
                 * @todo
                 *  - template
                 * Update the CHANGELOG file
                 */
                cliparse.option('changelog', {
                    description: 'Update CHANGELOG with commit messages',
                    default: 'CHANGELOG.md'
                })
                // deprecated will be moved to bblp docs
                // cliparse.flag('version-only', { aliases: ['v'], description: 'In version-only mode only README version section will be updated'})
            ]
        }, require('../lib/commands/common/bump') ),
        /*----------------------------------------------------------------*/
        /* Register package
        /*----------------------------------------------------------------*/
        cliparse.command('register', {
            description: 'Package manager type. Eg. `bblp register npm/bower`',
            args: [
                cliparse.argument('manager', {
                    description: 'Package manager',
                    parser: function(v) {
                        if (['bower', 'npm'].indexOf(v) !== -1) return {success: v};
                        else return {error: 'Wrong manager name!'.red};
                    },
                    default: 'bower' // will be deprecated in favor for npm
                })
            ],
            options: [
                cliparse.option('registry', {
                    description: 'Registry endpoint.',
                    parser: function(value) {
                        if( !utils.isString(value) || !utils.isUrl(value)  ) {
                            return {error: colors.error('Registry option must be an valid url endpoint')}
                        }
                        return {success: value}

                    }
                })
            ]
        }, require('../lib/commands/common/register') ),
        /*----------------------------------------------------------------*/
        /* Unregister package
        /*----------------------------------------------------------------*/
        cliparse.command('unregister', {
            description: 'Package manager type. Eg. `bblp unregister npm/bower`',
            args: [
                cliparse.argument('manager', {
                    description: 'Package manager',
                    parser: function(v) {
                        if (['bower', 'npm'].indexOf(v) !== -1) return {success: v};
                        else return {error: 'Wrong manager name!'.red};
                    },
                    default: 'bower' // will be deprecated in favor for npm
                })
            ],
            options: [
                cliparse.option('registry', {
                    description: 'Registry endpoint.',
                    parser: function(value) {
                        if( !utils.isString(value) || !utils.isUrl(value)  ) {
                            return {error: colors.error('Registry option must be an valid url endpoint')}
                        }
                        return {success: value}

                    }
                }),
                cliparse.flag('force', { aliases: ['f'], description: 'force', default: false})
            ]
        }, require('../lib/commands/common/unregister') ),

        /*----------------------------------------------------------------*/
        /* Custom Build
        /*----------------------------------------------------------------*/
        cliparse.command('custom-build', {
            description: 'Builds the widget/module using custom entry points.',
            args: [
                cliparse.argument('config', {
                    description: 'path to config file for components management',
                    default: ''
                })
            ],
            options: [
                cliparse.flag('withTemplates', { aliases: ['t'], description: 'Bundle HTML templates into build file (for widgets)'}),
                cliparse.flag('useUnminified', { aliases: ['u'], description: 'Build with unminified scripts'}),
                cliparse.flag('verbose', { aliases: ['v'], description: 'Flag to turn on/off webpack output'}),
                cliparse.flag('withPerformance', { aliases: ['p'], description: 'Parse performance annotations'})
            ]
        }, require('../lib/commands/common/custom-build') ),

        /*----------------------------------------------------------------*/
        /* Clean Widget
        /*----------------------------------------------------------------*/
        cliparse.command('clean', {
            description: 'Clean the widget/module dist folder',
            args: [],
            options: []
        }, require('../lib/commands/common/clean') ),

        /*----------------------------------------------------------------*/
        /* Build docs
        /*----------------------------------------------------------------*/
        cliparse.command('docs', {
            description: 'Generates documentation',
            args: [

            ],
            options: [
                cliparse.flag('api', { aliases: ['a'], description: 'Generate API reference markdown'}),
                cliparse.option('services', {
                    description: 'Generate documentation from RAML files. Used for raml services'
                }),
                cliparse.flag('stats', { aliases: ['s'], description: 'Generate checklist statistics markdown'}),
                cliparse.flag('report', { aliases: ['r'], description: 'Generate an .csv checklist report file'}),
                cliparse.option('update', { description: 'Update manual checklist'})

            ]
        }, require('../lib/commands/common/docs') ),
        /*----------------------------------------------------------------*/
        /* Commit - Commitizen hook
        /*----------------------------------------------------------------*/
        cliparse.command('commit', {
            description: 'Use conventional commit messaged. Default will run git commit.',
            args: [

            ],
            options: [

            ]
        }, require('../lib/commands/common/commit') )
    ]
});

cliparse.parse(BBCLI);
