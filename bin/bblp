#!/usr/bin/env node
var cliparse = require('cliparse');
var parsers = cliparse.parsers;
var pckJson = require('../package.json');
var colors = require('colors');

/*----------------------------------------------------------------*/
/* #TODO parse the commands folder and auto generate commands
/*----------------------------------------------------------------*/
var BBCLI = cliparse.cli({
    name: pckJson.name,
    version: pckJson.version,
    description: 'Backbase CLI tool',

    commands: [

    /*----------------------------------------------------------------*/
    /* Widget subcommand
    /*----------------------------------------------------------------*/
        //cliparse.command( 'widget', {
            //description: '',
            //commands: [
                /*----------------------------------------------------------------*/
                /* Generate Widget
                /*----------------------------------------------------------------*/
                cliparse.command('generate', {
                    description: 'Generate a widget/module based on a template default one is `widget-ng-template`.',
                    args: [
                        cliparse.argument('url', {
                            description: 'Template repo url',
                            default: 'https://stash.backbase.com/scm/lp/widget-ng-template.git'
                        })
                    ],
                    options: [

                    ]
                }, require('../lib/commands/common/generate') ),

                /*----------------------------------------------------------------*/
                /* Build Widget
                /*----------------------------------------------------------------*/
                cliparse.command('build', {
                    description: 'Builds the widget/module.',
                    args: [

                    ],
                    options: [
                        cliparse.flag('skipTests', { aliases: ['s'], description: 'Skip tests'}),
                        cliparse.flag('withTemplates', { aliases: ['t'], description: 'Bundle HTML templates into build file (for widgets)'})
                    ]
                }, require('../lib/commands/common/build') ),

                /*----------------------------------------------------------------*/
                /* Start Widget
                /*----------------------------------------------------------------*/
                cliparse.command('start', {
                    description: 'Start local development server on http://localhost:3000/',
                    args: [

                    ],
                    options: [

                    ]
                }, require('../lib/commands/common/start') ),
                /*----------------------------------------------------------------*/
                /* Install Widget Deps
                /*----------------------------------------------------------------*/
                cliparse.command('install', {
                    description: 'Install bower dependencies.',
                    args: [
                        cliparse.argument('package', {
                            description: 'dependency package',
                            default: '',
                            parser: parsers.stringParser,
                        })
                    ],
                    options: [
                        cliparse.flag('link', { aliases: ['l'], description: 'Auto symlink'})
                    ]
                }, require('../lib/commands/common/install') ),
                 /*----------------------------------------------------------------*/
                /* Bower link
                /*----------------------------------------------------------------*/
                cliparse.command('link', {
                    description: 'Links all the dependencies from bower directory',
                    args: [

                    ],
                    options: [

                    ]
                }, require('../lib/commands/common/link') ),
                /*----------------------------------------------------------------*/
                /* Test Widget
                /*----------------------------------------------------------------*/
                cliparse.command('test', {
                    description: 'Test the widget/module using karma test runner and PhantomJS',
                    args: [

                    ],
                    options: [
                        cliparse.flag('watch', { aliases: ['w'], description: 'Watch files'})
                    ]
                }, require('../lib/commands/common/test') ),

                /*----------------------------------------------------------------*/
                /* Register bower package
                /*----------------------------------------------------------------*/
                cliparse.command('register', {
                    description: 'Register bower package to registry endpoint. Default `http://launchpad.backbase.com:5678/`',
                    args: [
                        cliparse.argument('registry', {
                            description: 'Bower registry endpoint.',
                            default: 'http://launchpad.backbase.com:5678'
                        })
                    ],
                    options: [

                    ]
                }, require('../lib/commands/common/register') ),
                /*----------------------------------------------------------------*/
                /* Unregister bower package
                /*----------------------------------------------------------------*/
                cliparse.command('unregister', {
                    description: 'Unregister bower package to registry endpoint. Default `http://launchpad.backbase.com:5678/`',
                    args: [
                        cliparse.argument('registry', {
                            description: 'Bower registry endpoint.',
                            default: 'http://launchpad.backbase.com:5678'
                        })
                    ],
                    options: [

                    ]
                }, require('../lib/commands/common/unregister') ),
                /*----------------------------------------------------------------*/
                /* Bump bower version
                /*----------------------------------------------------------------*/
                cliparse.command('bump', {
                    description: 'Bump version in bower, README.md and CHANGELOG.md',
                    args: [
                        cliparse.argument('VERSION', {
                            description: 'major'.gray + ' [X.x.x], ' + 'minor'.gray + ' [x.X.x] or ' + 'patch'.gray + ' [x.x.X]',
                            parser: function(v) {
                                if (['major', 'minor', 'patch'].indexOf(v) !== -1) return {success: v};
                                else return {error: 'Wrong version!'.red};
                            }
                        }),
                        cliparse.argument('MESSAGE', {
                            description: 'Bump message',
                            default: ''
                        })
                    ],
                    options: [
                    ]
                }, require('../lib/commands/common/bump') ),

                /*----------------------------------------------------------------*/
                /* Lock Bower Dependencies
                 /*----------------------------------------------------------------*/
                cliparse.command('release-mobile', {
                    description: 'Locks the bower dependencies to the latest changes in master',
                    args: [
                        cliparse.argument('branch', {
                            description: 'Set the branch where to get the latest commits if latest flag is set',
                            default: 'master'
                        }),
                        cliparse.argument('private', {
                            description: 'Set the url to check for latest commits if latest flag is set',
                            default: 'stash.backbase.com'
                        })
                    ],
                    options: [
                        cliparse.flag('latest', { aliases: ['l'], description: 'Get latest commit in branch.'})
                    ]
                }, require('../lib/commands/common/release-mobile') )

            //]
        //})
    ]
});

cliparse.parse(BBCLI);
